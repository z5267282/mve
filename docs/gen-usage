#!/usr/bin/env dash

# Generate usage mesasge as documentation for each script.
# It is generated between the header # Usage and either first of:
# the next header; or the end of the file.

main() {
    if ! [ -d ../.venv ] 
    then
        echo 'cannot generated usage documentation as ../.venv does not exist'
        exit 10
    fi

    . ../.venv/bin/activate
    # use before, and after files
    new="$(mktemp)"
    trap 'rm -f "$new"' EXIT

    root="$(pwd)"
    cd ../

    for script in mve/scripts/log/*
    do
        usage_can_be_generated "$script" || continue

        doc="${root}/$(basename "$script" | sed -E 's/py$/md/')"
        sed -E -n -e '1,/^# Usage/p' "$doc" | sed '$d' > "$new"
        pure_script="$(basename "$script" | sed -E 's/...$//')"
        printf '# Usage\n' >> "$new"
        printf '\n' >> "$new"
        printf '```\n' >> "$new"
        python3 -m mve log "$pure_script" --help >> "$new"
        printf '```\n' >> "$new"
        printf '\n' >> "$new"
        extract_after_usage "$doc" >> "$new"

        cp "$new" "$doc"

        echo "generated new docs for ${pure_script}"
    done

    for script in mve/scripts/no_log/*
    do
        usage_can_be_generated "$script" || continue

        doc="${root}/$(basename "$script" | sed -E 's/py$/md/')"
        sed -E -n -e '1,/^# Usage/p' "$doc" | sed '$d' > "$new"
        pure_script="$(basename "$script" | sed -E 's/...$//')"
        printf '# Usage\n' >> "$new"
        printf '\n' >> "$new"
        printf '```\n' >> "$new"
        python3 -m mve no-log "$pure_script" --help >> "$new"
        printf '```\n' >> "$new"
        printf '\n' >> "$new"
        extract_after_usage "$doc" >> "$new"

        cp "$new" "$doc"

        echo "generated new docs for ${pure_script}"
    done

    deactivate
}

# only auto-gen files that have a usage section
usage_can_be_generated() {
    script="$1"
    if ! [ -f "$script" ] || [ "$(basename "$script")" = '__init__.py' ]
    then
        false
        return $?
    fi

    legacy='no'
    # this would be the class constructor
    grep -F -q '(Legacy)' "$script" && legacy='yes'

    if [ $legacy = 'yes' ]
    then
        false
    else
        true
    fi

    return $?
}

extract_after_usage() {
    doc="$1"

    extract_last_header "$doc"
    print_from_usage_onwards "$doc" | sed -E '1,/^#/d'
}

print_from_usage_onwards() {
    doc="$1"
    sed -E -n '/^# Usage/,$ p' "$doc"
}

    # print_from_usage_onwards "$doc" 

extract_last_header() {
    # the first line starts with a # Usage,
    # but it will match by line number (in a short-circuiting style)
    doc="$1"
    print_from_usage_onwards "$doc" | sed -E -n '1,/^#/p' | tail -1
}

main
